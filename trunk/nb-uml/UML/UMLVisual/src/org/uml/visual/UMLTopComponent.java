/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.uml.visual;

import java.awt.BorderLayout;
import javax.swing.JScrollPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.uml.model.ClassDiagram;
import org.uml.visual.palette.PaletteSupport;
import org.uml.visual.widgets.ClassDiagramScene;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.uml.visual//UML//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "UMLTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.uml.visual.UMLTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_UMLAction",
preferredID = "UMLTopComponent")
@Messages({
    "CTL_UMLAction=UML",
    "CTL_UMLTopComponent=UML Window",
    "HINT_UMLTopComponent=This is a UML window"
})
public final class UMLTopComponent extends TopComponent {

    private ClassDiagram umlClassDiagram;
    private ClassDiagramScene classDiagramScene;
    private JScrollPane shapePane;

    public UMLTopComponent() {
        initComponents();
        setName(Bundle.CTL_UMLTopComponent());
        setToolTipText(Bundle.HINT_UMLTopComponent());
        classDiagramScene = new ClassDiagramScene(umlClassDiagram = new ClassDiagram());     // Fresh scene with fresh diagram
//        umlClassDiagram= new umlClassDiagram();
//       
//        viewPane.setViewportView(view);
        shapePane = new JScrollPane();
        shapePane.setViewportView(classDiagramScene.createView());
        add(shapePane, BorderLayout.CENTER);
        add(classDiagramScene.createSatelliteView(), BorderLayout.WEST);
        associateLookup(Lookups.fixed(new Object[]{PaletteSupport.createPalette()}));
    }

//    public UMLTopComponent(ClassDiagram umlClassDiagram) {
//        this.umlClassDiagram = umlClassDiagram;
//        initComponents();
//        setName(Bundle.CTL_UMLTopComponent());
//        setToolTipText(Bundle.HINT_UMLTopComponent());
//        setLayout(new BorderLayout());
//        classDiagramScene = new ClassDiagramScene(this.umlClassDiagram);
//
//        //implementiraj
//        //scene.visualizeNetwork();
//       
//        associateLookup(Lookups.fixed(new Object[]{PaletteSupport.createPalette()}));
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewPane = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(viewPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane viewPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
