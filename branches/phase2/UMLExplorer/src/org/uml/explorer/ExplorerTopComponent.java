package org.uml.explorer;

import java.awt.BorderLayout;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.tree.TreeSelectionModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.uml.model.ClassDiagram;
import org.uml.model.components.ComponentBase;
import org.uml.model.members.MemberBase;

/**
 * Top component which displays something. See:
 *
 * http://platform.netbeans.org/tutorials/nbm-selection-1.html
 * http://platform.netbeans.org/tutorials/nbm-selection-2.html
 * http://platform.netbeans.org/tutorials/nbm-nodesapi3.html
 * http://wiki.netbeans.org/BasicUnderstandingOfTheNetBeansNodesAPI
 *
 *
 * http://netbeans-org.1045718.n5.nabble.com/TopComponent-associateLookup-is-incompatible-with-setActivatedNodes-is-it-a-bug-td3261230.html
 */
@ConvertAsProperties(
        dtd = "-//org.uml.explorer.ide.navigator//Explorer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "navigator", openAtStartup = false)
@ActionID(category = "Window", id = "org.uml.explorer.ExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExplorerAction",
        preferredID = "ExplorerTopComponent")
@Messages({
    "CTL_ExplorerAction=Explorer",
    "CTL_ExplorerTopComponent=Explorer Window",
    "HINT_ExplorerTopComponent=This is a Explorer window"
})
public final class ExplorerTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private ExplorerManager explorerManager = new ExplorerManager();
    private ClassDiagramNode cNode;
    private BeanTreeView explorerTree;

    Result<ClassDiagram> resultCD;
    Result<ComponentBase> resultCDC;
    Result<MemberBase> resultM;

    public ExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ExplorerTopComponent());
        setToolTipText(Bundle.HINT_ExplorerTopComponent());

        explorerTree = new BeanTreeView();
        explorerTree.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        add(explorerTree, BorderLayout.CENTER);

        getActionMap().put("delete", ExplorerUtils.actionDelete(explorerManager, true));
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));

        explorerTree.setRootVisible(false);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        resultCD = Utilities.actionsGlobalContext().lookupResult(ClassDiagram.class);
        resultCD.addLookupListener(this);
        // zasto ovaj poziv? radi i bez toga, jer je registrovan lookup, sam zove resultChanged
//        resultChanged(new LookupEvent(resultCD));

        resultCDC = Utilities.actionsGlobalContext().lookupResult(ComponentBase.class);
        resultCDC.addLookupListener(this);

        resultM = Utilities.actionsGlobalContext().lookupResult(MemberBase.class);
        resultM.addLookupListener(this);
    }

    @Override
    protected void componentActivated() {
        super.componentActivated();
    }

    @Override
    protected void componentShowing() {
        super.componentShowing();
    }

    @Override
    public void componentClosed() {
        resultCD.removeLookupListener(this);
        resultCDC.removeLookupListener(this);
        resultM.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    @SuppressWarnings("unchecked")
    public void resultChanged(LookupEvent ev) {
        Lookup.Result<Object> result = (Lookup.Result<Object>) ev.getSource();
        Collection<? extends Object> instances = result.allInstances();

        if (!instances.isEmpty()) {
            for (Object selectedItem : instances) {
                if (selectedItem instanceof ClassDiagram) {
                    ClassDiagram selectedComponent = (ClassDiagram) selectedItem;
//                    if (cNode == null || selectedComponent != cNode.getClassDiagram()) {
                    cNode = new ClassDiagramNode(selectedComponent);
                    explorerManager.setRootContext(cNode); //this one calls resultChanged recursivly, since global lookup is changed
                    explorerTree.setRootVisible(true);
//                    }

                    // TODO refactor
                } else if (selectedItem instanceof ComponentBase) {
                    Children children = explorerManager.getRootContext().getChildren();
                    ArrayList<Node> nodes = new ArrayList<>();
                    for (Node n : children.getNodes()) {
                        if (n instanceof ComponentNode) {
                            ComponentNode cdcn = (ComponentNode) n;
                            if (cdcn.getComponent() == selectedItem) {
                                nodes.add(n);
                                break;
                            }
                        }
                    }
                    try {
                        explorerManager.setSelectedNodes(nodes.toArray(new Node[nodes.size()]));
//                        setActivatedNodes(nodes.toArray(new Node[nodes.size()]));
                    } catch (PropertyVetoException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                } else if (selectedItem instanceof MemberBase) {
                    Children children = explorerManager.getRootContext().getChildren();
                    ArrayList<Node> nodes = new ArrayList<>();
                    boolean over = false;
                    for (Node n : children.getNodes()) {
                        for (Node nc : n.getChildren().getNodes()) {
                            if (nc instanceof MemberNode) {
                                MemberNode mn = (MemberNode) nc;
                                if (mn.getMember() == selectedItem) {
                                    nodes.add(nc);
                                    over = true;
                                    break;
                                }
                            }
                        }
                        if (over) break;
                    }
                    try {
                        explorerManager.setSelectedNodes(nodes.toArray(new Node[nodes.size()]));
//                        setActivatedNodes(nodes.toArray(new Node[nodes.size()]));
                    } catch (PropertyVetoException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        } else {
        }
//        open();
        // ne moze uvek ovo
//        requestActive();
    }

}
