package org.uml.explorer;

import java.awt.BorderLayout;
import java.beans.PropertyVetoException;
import java.util.Collection;
import java.util.Set;
import javax.swing.tree.TreeSelectionModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.WindowManager;
import org.uml.model.ClassDiagram;
import org.uml.model.components.ComponentBase;
import org.uml.model.members.MemberBase;

/**
 * Top component which displays something. See:
 *
 * http://platform.netbeans.org/tutorials/nbm-selection-1.html
 * http://platform.netbeans.org/tutorials/nbm-selection-2.html
 * http://platform.netbeans.org/tutorials/nbm-nodesapi3.html
 * http://wiki.netbeans.org/BasicUnderstandingOfTheNetBeansNodesAPI
 *
 *
 * http://netbeans-org.1045718.n5.nabble.com/TopComponent-associateLookup-is-incompatible-with-setActivatedNodes-is-it-a-bug-td3261230.html
 */
@ConvertAsProperties(
        dtd = "-//org.uml.explorer.ide.navigator//Explorer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "navigator", openAtStartup = false)
@ActionID(category = "Window", id = "org.uml.explorer.ExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExplorerAction",
        preferredID = "ExplorerTopComponent")
@Messages({
    "CTL_ExplorerAction=Explorer",
    "CTL_ExplorerTopComponent=Explorer Window",
    "HINT_ExplorerTopComponent=This is a Explorer window"
})
public final class ExplorerTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private final ExplorerManager explorerManager = new ExplorerManager();
    private final BeanTreeView explorerTree;

    private boolean activated;

    private Result<ClassDiagram> resultCD;
    private Result<ComponentBase> resultC;
    private Result<MemberBase> resultM;

    public ExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ExplorerTopComponent());
        setToolTipText(Bundle.HINT_ExplorerTopComponent());

        explorerTree = new BeanTreeView();
        explorerTree.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        add(explorerTree, BorderLayout.CENTER);

        getActionMap().put("delete", ExplorerUtils.actionDelete(explorerManager, true));
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));

        explorerTree.setRootVisible(false);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    public BeanTreeView getExplorerTree() {
        return explorerTree;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void componentActivated() {
        super.componentActivated();
        activated = true;
    }

    @Override
    protected void componentDeactivated() {
        super.componentDeactivated();
        activated = false;
    }

    @Override
    public void componentOpened() {
        resultCD = Utilities.actionsGlobalContext().lookupResult(ClassDiagram.class);
        resultCD.addLookupListener(this);
        // calls result changed on its own, no need for: 
//        resultChanged(new LookupEvent(resultCD));

        resultC = Utilities.actionsGlobalContext().lookupResult(ComponentBase.class);
        resultC.addLookupListener(this);

        resultM = Utilities.actionsGlobalContext().lookupResult(MemberBase.class);
        resultM.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        resultCD.removeLookupListener(this);
        resultC.removeLookupListener(this);
        resultM.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    @SuppressWarnings({"unchecked", "rawtypes"})
    public void resultChanged(LookupEvent ev) {
        Lookup.Result source = (Lookup.Result) ev.getSource();
        Collection instances = source.allInstances();
        if (instances.isEmpty()) {
            // When user opens new scene while some is already open, instances are empty
            // Or when user closes all scenes, instances are empty
            boolean someSceneOpen = false;
            boolean currentSceneOpen = false;
            Set<TopComponent> tcs = WindowManager.getDefault().getRegistry().getOpened();
            for (TopComponent tc : tcs) {
                // TODO maybe rework
                if (tc.getClass().getSimpleName().equals("UMLTopComponent")) { // Class name is hardcoded, because we cannot access UMLTopComponent from here because of cyclic dependency
                    someSceneOpen = true;
                    if (tc.getName().equals(explorerManager.getRootContext().getDisplayName())) {
                        currentSceneOpen = true;
                    }
                }
            }
            // If no scenes are open, clear the Explorer
            if (!someSceneOpen) {
                explorerManager.setRootContext(Node.EMPTY);
                explorerTree.setRootVisible(false);
            } else {
                // if some are open, clear the selection
                if (!activated) {
                    if (currentSceneOpen){
                        selectNode(null);
                    } else {
                        explorerManager.setRootContext(Node.EMPTY);
                        explorerTree.setRootVisible(false);
                    }
                }
            }
            repaint();
            validate();
        } else {
            for (Object instance : instances) {
                if (instance instanceof ClassDiagram) {
                    ClassDiagram diagram = (ClassDiagram) instance;
                    // If the rootContext is empty
                    if (!(explorerManager.getRootContext() instanceof ClassDiagramNode)) {
                        createRootNode(diagram);
                    } else {
                        // If the rootContext exists
                        ClassDiagramNode currentRoot = (ClassDiagramNode) explorerManager.getRootContext();
                        // If the root diagram differs from the one in the lookup, replace
                        if (diagram != currentRoot.getClassDiagram()) {
                            Node newRoot = createRootNode(diagram);
                            selectNode(newRoot);
                        } else {    // else select the root
                            selectNode(currentRoot);
                        }
                    }
                } else if (instance instanceof ComponentBase) {
                    selectComponentNode((ComponentBase) instance);
                } else if (instance instanceof MemberBase) {
                    selectMemberNode((MemberBase) instance);
                }
                // Process only the first of the instances (selection limited do 1)
                break;
            }
        }
        repaint();
        validate();
    }

    private Node createRootNode(ClassDiagram diagram) {
        ClassDiagramNode node = new ClassDiagramNode(diagram);
        explorerManager.setRootContext(node);
        explorerTree.setRootVisible(true);
        return node;
    }

    private void selectComponentNode(ComponentBase component) {
        if (explorerManager.getRootContext() instanceof ClassDiagramNode) {
            ClassDiagramNode root = (ClassDiagramNode) explorerManager.getRootContext();
            if (root.getClassDiagram() != component.getParentDiagram()) {
                createRootNode(component.getParentDiagram());
            }
        }
        for (Node cn : explorerManager.getRootContext().getChildren().getNodes()) {
            ComponentNode componentNode = (ComponentNode) cn;
            if (componentNode.getComponent() == component) {
                selectNode(componentNode);
                return;
            }
        }
    }

    private void selectMemberNode(MemberBase member) {
        if (explorerManager.getRootContext() instanceof ClassDiagramNode) {
            ClassDiagramNode root = (ClassDiagramNode) explorerManager.getRootContext();
            if (root.getClassDiagram() != member.getDeclaringComponent().getParentDiagram()) {
                createRootNode(member.getDeclaringComponent().getParentDiagram());
            }
        }
        for (Node cn : explorerManager.getRootContext().getChildren().getNodes()) {
            for (Node mn : cn.getChildren().getNodes()) {
                MemberNode memberNode = (MemberNode) mn;
                if (memberNode.getMember() == member) {
                    selectNode(memberNode);
                    return;
                }
            }
        }
    }

    /**
     * Select node in the tree. If null is passed, selection is cleared.
     *
     * @param node
     */
    private void selectNode(Node node) {
        try {
            if (node != null) explorerManager.setSelectedNodes(new Node[]{node});
            else explorerManager.setSelectedNodes(new Node[]{});
        } catch (PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
}
