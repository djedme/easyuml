package org.uml.explorer;

import java.awt.BorderLayout;
import java.beans.PropertyVetoException;
import java.util.Collection;
import java.util.Set;
import javax.swing.tree.TreeSelectionModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.WindowManager;
import org.uml.model.ClassDiagram;
import org.uml.model.components.ComponentBase;
import org.uml.model.members.MemberBase;

/**
 * Top component which displays something. See:
 *
 * http://platform.netbeans.org/tutorials/nbm-selection-1.html
 * http://platform.netbeans.org/tutorials/nbm-selection-2.html
 * http://platform.netbeans.org/tutorials/nbm-nodesapi3.html
 * http://wiki.netbeans.org/BasicUnderstandingOfTheNetBeansNodesAPI
 *
 *
 * http://netbeans-org.1045718.n5.nabble.com/TopComponent-associateLookup-is-incompatible-with-setActivatedNodes-is-it-a-bug-td3261230.html
 */
@ConvertAsProperties(
        dtd = "-//org.uml.explorer.ide.navigator//Explorer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "navigator", openAtStartup = false)
@ActionID(category = "Window", id = "org.uml.explorer.ExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExplorerAction",
        preferredID = "ExplorerTopComponent")
@Messages({
    "CTL_ExplorerAction=Explorer",
    "CTL_ExplorerTopComponent=Explorer Window",
    "HINT_ExplorerTopComponent=This is a Explorer window"
})
public final class ExplorerTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private final ExplorerManager explorerManager = new ExplorerManager();
    private final BeanTreeView explorerTree;

    private Result<ClassDiagram> resultCD;
    private Result<ComponentBase> resultC;
    private Result<MemberBase> resultM;

    public ExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ExplorerTopComponent());
        setToolTipText(Bundle.HINT_ExplorerTopComponent());

        explorerTree = new BeanTreeView();
        explorerTree.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        add(explorerTree, BorderLayout.CENTER);

        getActionMap().put("delete", ExplorerUtils.actionDelete(explorerManager, true));
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));

        explorerTree.setRootVisible(false);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    public BeanTreeView getExplorerTree() {
        return explorerTree;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void componentDeactivated() {
        super.componentDeactivated();
        // When deactivating ExplorerTopComponent, deselect all nodes,
        // except when we are accessing linked TCs
        if (!isActivatedLinkedTC()) {
            deselectAllNodes();
        }
    }

    private boolean isActivatedLinkedTC() {
        TopComponent activatedTC = WindowManager.getDefault().getRegistry().getActivated();
        TopComponent propertiesTC = WindowManager.getDefault().findTopComponent("properties");
        if (activatedTC == propertiesTC
                // TODO tight coupling. Can this be done better?
                || (activatedTC.getClass().getSimpleName().equals("UMLTopComponent") && activatedTC.getName().equals(explorerManager.getRootContext().getDisplayName()))
                || activatedTC == this) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public void componentOpened() {
        resultCD = Utilities.actionsGlobalContext().lookupResult(ClassDiagram.class);
        resultC = Utilities.actionsGlobalContext().lookupResult(ComponentBase.class);
        resultM = Utilities.actionsGlobalContext().lookupResult(MemberBase.class);
        // calls result changed on its own, no need for: 
//        resultChanged(new LookupEvent(resultCD));
        addLookupListeners();
    }

    @Override
    public void componentClosed() {
        removeLookupListeners();
    }

    // Used to enable selection detection from ClassDiagramScene
    private void addLookupListeners() {
        resultCD.addLookupListener(this);
        resultC.addLookupListener(this);
        resultM.addLookupListener(this);
    }

    // Used to disable selection detection from ClassDiagramScene, while changing selection in explorer (avoid loop selections)
    private void removeLookupListeners() {
        resultCD.removeLookupListener(this);
        resultC.removeLookupListener(this);
        resultM.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    @SuppressWarnings({"unchecked", "rawtypes"})
    public void resultChanged(LookupEvent ev) {
        Lookup.Result source = (Lookup.Result) ev.getSource();
        Collection instances = source.allInstances();
        if (!instances.isEmpty()) {
            for (Object instance : instances) {
                if (instance instanceof ClassDiagram) {
                    ClassDiagram selectedDiagram = (ClassDiagram) instance;
                    Node currentRoot = explorerManager.getRootContext();
                    if (isValidDiagram(currentRoot, selectedDiagram)) {
                        // If diagrams are the same select the root
                        selectNode(currentRoot);
                    } else {
                        // else the root diagram differs from the one in the lookup,

                        // deselect all in order for scene to clear selection and replace root
                        Node newRoot = createRootNode(selectedDiagram);
                        selectNode(newRoot);
                    }
                } else if (instance instanceof ComponentBase) {
                    selectComponentNode((ComponentBase) instance);
                } else if (instance instanceof MemberBase) {
                    selectMemberNode((MemberBase) instance);
                }
                // Process only the first of the instances (selection limited do 1)
                break;
            }
        } else {
            // When a user closes all scenes, instances are empty
            // Or when a user deselects UMLTopComponent

            // Check if the current scene shown in Explorer is opened
            boolean currentSceneOpen = false;
            Set<TopComponent> tcs = WindowManager.getDefault().getRegistry().getOpened();
            for (TopComponent tc : tcs) {
                if (tc.getClass().getSimpleName().equals("UMLTopComponent")) { // Class name is hardcoded, because we cannot access UMLTopComponent from here because of cyclic dependency
                    if (tc.getName().equals(explorerManager.getRootContext().getDisplayName())) {
                        currentSceneOpen = true;
                        break;
                    }
                }
            }

            // If the current scene shown in Explorer is closed, empty Explorer
            if (!currentSceneOpen) {
                emptyTree();
            } else {
                // If it is open and linked TCs are not activated, deselect all
                if (!isActivatedLinkedTC()) {
                    deselectAllNodes();
                }
            }
        }
        repaint();
        validate();
    }

    private void emptyTree() {
        explorerManager.setRootContext(Node.EMPTY);
        explorerTree.setRootVisible(false);
    }

    private Node createRootNode(ClassDiagram diagram) {
        ClassDiagramNode node = new ClassDiagramNode(diagram);
        explorerManager.setRootContext(node);
        explorerTree.setRootVisible(true);
        return node;
    }

    private boolean isValidDiagram(Node rootNode, ClassDiagram diagram) {
        if (rootNode instanceof ClassDiagramNode) { // on opening of file, root is AbstractNode, that's why we need this check
            ClassDiagramNode root = (ClassDiagramNode) getExplorerManager().getRootContext();
            if (root.getClassDiagram() == diagram) {
                return true;
            }
        }
        deselectAllNodes();
        return false;
    }

    private void selectComponentNode(ComponentBase component) {
        if (!isValidDiagram(getExplorerManager().getRootContext(), component.getParentDiagram())) {
            createRootNode(component.getParentDiagram());
        }
        for (Node cn : getExplorerManager().getRootContext().getChildren().getNodes()) {
            ComponentNode componentNode = (ComponentNode) cn;
            if (componentNode.getComponent() == component) {
                selectNode(componentNode);
                return;
            }
        }
    }

    private void selectMemberNode(MemberBase member) {
        if (!isValidDiagram(getExplorerManager().getRootContext(), member.getDeclaringComponent().getParentDiagram())) {
            createRootNode(member.getDeclaringComponent().getParentDiagram());
        }
        for (Node cn : getExplorerManager().getRootContext().getChildren().getNodes()) {
            for (Node mn : cn.getChildren().getNodes()) {
                MemberNode memberNode = (MemberNode) mn;
                if (memberNode.getMember() == member) {
                    selectNode(memberNode);
                    return;
                }
            }
        }
    }

    /**
     * Select node in the tree. If null is passed, selection is cleared.
     *
     * @param node
     */
    private void selectNode(Node node) {
        removeLookupListeners();
        try {
            if (node != null) getExplorerManager().setSelectedNodes(new Node[]{node});
            else getExplorerManager().setSelectedNodes(new Node[]{});
        } catch (PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
        }
        addLookupListeners();
    }

    private void deselectAllNodes() {
        selectNode(null);
    }
}
